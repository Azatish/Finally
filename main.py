import sqlite3
import sys

from PyQt5 import uic
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtMultimedia import *
from PyQt5.QtWidgets import *


def except_hook(cls, exception, traceback):
    sys.__excepthook__(cls, exception, traceback)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.previous_tracks = None
        uic.loadUi('please_be_final.ui', self)
        self.init_UI()
        self.action_methods_player = {
            'play': self.player.play,
            'pause': self.player.pause,
            'stop': self.player.stop
        }
        self.init_database()

    def init_database(self):  # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ QTreeWidget-–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏ –∏–∑ db
        cursor = self.con.cursor()
        cursor.execute("SELECT id, name FROM playlist_s")
        playlists = cursor.fetchall()
        cursor.execute("SELECT playlist_id, title, track_link FROM tracks")
        tracks = cursor.fetchall()
        playlist_tracks = {}
        for track in tracks:
            playlist_id = track[0]
            if playlist_id in playlist_tracks:
                playlist_tracks[playlist_id].append(track)
            else:
                playlist_tracks[playlist_id] = [track]

        for playlist in playlists:
            playlist_item = QTreeWidgetItem(self.tree, [playlist[1]])
            playlist_id = playlist[0]
            if playlist_id in playlist_tracks:
                for track in playlist_tracks[playlist_id]:
                    track_item = QTreeWidgetItem(playlist_item, [track[1]])
                    track_item.setToolTip(0, track[2])
                    track_item.setFlags(track_item.flags() | ~Qt.ItemIsEditable)

        self.tree.itemClicked.connect(self.track_clicked)
        button = QTreeWidgetItem(self.tree, ['Create New Playlist'])
        button.setFlags(button.flags() & ~Qt.ItemIsEditable)
        self.tree.show()

    def init_UI(self):
        self.setWindowTitle("???")

        self.current_duration = 0

        # player –æ—Ç QMediaPlayer
        self.player = QMediaPlayer(self)

        # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ dial-–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –º—É–∑—ã–∫–∏
        self.Volume_dial.setMinimum(0)
        self.Volume_dial.setMaximum(100)
        self.Volume_label.setText('100')
        self.Volume_dial.setValue(100)
        self.Volume_dial.valueChanged.connect(self.set_volume)

        # db
        self.con = sqlite3.connect("playlist.db")
        self.cur = self.con.cursor()

        #
        self.previous_tracks.itemClicked.connect(self.on_item_clicked)

        # —Å–æ–∑–¥–∞–Ω–∏–µ menu_bar-–æ–≤
        FileMenu = self.menuBar().addMenu('&File')

        OpenFileAction = QAction('Open...', self)
        OpenFileAction.setStatusTip('Open')
        OpenFileAction.setShortcut(QKeySequence.Open)
        OpenFileAction.triggered.connect(self.Open_File)
        FileMenu.addAction(OpenFileAction)

        PlaylistMenu = self.menuBar().addMenu('&Playlists')

        CreatePlaylistsAction = QAction('Create playlist...', self)
        CreatePlaylistsAction.setStatusTip('Create playlist')
        CreatePlaylistsAction.triggered.connect(self.create_new_playlist)
        PlaylistMenu.addAction(CreatePlaylistsAction)

        ExportMenu = self.menuBar().addMenu('&Export')

        Export_with_txtAction = QAction('as txt...', self)
        Export_with_txtAction.setStatusTip('as txt')
        Export_with_txtAction.triggered.connect(self.export_tracks_as_txt)
        ExportMenu.addAction(Export_with_txtAction)

        Export_with_fileAction = QAction('as files in folder...', self)
        Export_with_fileAction.setStatusTip('as files in folder...')
        Export_with_fileAction.triggered.connect(self.export_tracks_as_files)
        ExportMenu.addAction(Export_with_fileAction)

        info_about_ExportAction = QAction('info...', self)
        info_about_ExportAction.setStatusTip('info')
        info_about_ExportAction.triggered.connect(self.infoExport)
        ExportMenu.addAction(info_about_ExportAction)

        About_btn = QAction('About...', self)
        Export_with_fileAction.setStatusTip('About...')
        Export_with_fileAction.triggered.connect(self.about_programm)
        self.menuBar().addAction(About_btn)

        # –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è, –ø–∞—É–∑—ã –∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–µ–∫–∞ –≤ player-–µ
        self.Play_btn.clicked.connect(self.play_music)
        self.Pause_btn.clicked.connect(self.pause_music)
        self.Stop_btn.clicked.connect(self.stop_music)
        # self.add_to_playlist.clicked.connect(self.add_to_playlist)

        # —Å–ª–∞–π–¥–µ—Ä –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–æ —Ç—Ä–µ–∫—É
        self.timelime_slider.setMinimum(0)
        self.timelime_slider.setMaximum(self.player.duration())
        self.timelime_slider.valueChanged.connect(self.on_slider_value_changed)

        # —Å–æ–∑–¥–∞–Ω–∏–µ messagebox-–æ–≤
        self.message_box_isMedia = QMessageBox(self)
        self.message_box_new_playlist = QMessageBox(self)

        #
        self.timer_of_timeline = QTimer()
        self.timer_of_timeline.timeout.connect(self.update_label_value_slider)
        self.timer_of_timeline.start(1000)

        # –ø–æ–¥–∫–ª—é—á–∞–µ–º –∫ –ø–ª–µ–π–ª–∏—Å—Ç–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –ø—Ä–∞–≤—É—é –∫–Ω–æ–ø–∫—É –º—ã—à–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å–Ω–æ–µ –º–µ–Ω—é
        self.tree.setContextMenuPolicy(Qt.CustomContextMenu)
        self.tree.customContextMenuRequested.connect(show_context_menu)

    def Open_File(self):  # –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞
        try:
            fileName, _ = QFileDialog.getOpenFileName(self, "Open", '.', "All Files (*);;")
            # "Files (*.mp3, *.wav, *.ogg, *.flac, *.flac, *.aac, *.m4a, *.alac, *.wma, *.aiff, *.opus)"
            # self.load_mp3(fileName)
            self.previous_tracks.addItem(fileName)
            self.current_duration = self.player.duration()
            self.cur.execute("""INSERT INTO tracks(playlist_id, title, track_link) VALUES('1', ?, ?)""",
                             (fileName[fileName.index('Finally') + 8:], fileName)).fetchall()
            # self.cur.close()
            self.con.commit()
        except ValueError:
            pass

    def load_mp3(self, filename):  # –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ø–ª–µ–µ—Ä –º—É–∑—ã–∫—É
        media = QUrl.fromLocalFile(filename)
        content = QMediaContent(media)
        self.player.setMedia(content)

    def set_volume(self):  # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å –º—É–∑—ã–∫–∏
        value = self.Volume_dial.value()
        self.Volume_label.setText(str(value))
        self.player.setVolume(int(value))

    def play_music(self):  # –∏–≥—Ä–∞—Ç—å –º—É–∑—ã–∫—É
        self.check_isMedia_now('play')

    def pause_music(self):  # –ø–∞—É–∑–∞ –º—É–∑—ã–∫–∏
        self.check_isMedia_now('pause')

    def stop_music(self):  # –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
        self.check_isMedia_now('stop')

    def check_isMedia_now(self, action=None):  # –ø—Ä–æ–≤–µ—Ä–∫–∞(–∑–∞–Ω—è—Ç –ª–∏ –ø–ª–µ–µ—Ä –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç)
        if self.player.media().isNull():
            self.message_box_isMedia.setWindowTitle("–°–æ–æ–±—â–µ–Ω–∏–µ")
            self.message_box_isMedia.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è!")
            self.message_box_isMedia.setStandardButtons(QMessageBox.Ok)
            self.message_box_isMedia.setDefaultButton(QMessageBox.Ok)
            self.message_box_isMedia.setIcon(QMessageBox.Information)

            self.message_box_isMedia.button(QMessageBox.Ok).setEnabled(False)  # –¥–µ–ª–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫—É –û–ö –Ω–∞ 3 —Å–µ–∫
            timer = QTimer(self)
            timer.timeout.connect(self.enable_message_box_isMedia_button)
            timer.setSingleShot(True)
            timer.start(4000)
            self.message_box_isMedia.exec_()
        else:
            activate = self.action_methods_player.get(action)  # –∑–∞–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            activate()  # –∑–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ç–æ–¥

    def enable_message_box_isMedia_button(self):  # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —É MessageBox
        self.message_box_isMedia.button(QMessageBox.Ok).setEnabled(True)

    # def keyPressEvent(self, event):
    #     # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–æ—á–∫–∞–º–∏ self.VolumeDialüòÄ
    #     if event.key() == Qt.Key_Left or event.key() == Qt.Key_Down:
    #         if self.Volume_dial.value() == self.Volume_dial.minimum():
    #             self.Volume_dial.setValue(self.Volume_dial.maximum())
    #         else:
    #             self.Volume_dial.setValue(self.Volume_dial.value() - 1)
    #     if event.key() == Qt.Key_Right or event.key() == Qt.Key_Up:
    #         if self.Volume_dial.value() == self.Volume_dial.maximum():
    #             self.Volume_dial.setValue(self.Volume_dial.minimum())
    #         else:
    #             self.Volume_dial.setValue(self.Volume_dial.value() + 1)

    def export_tracks_as_txt(self):  # —ç–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–∫–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ txt —Ñ–∞–π–ª
        pass

    def export_tracks_as_files(self):  # —ç–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–∫–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –≤ –ø–∞–ø–∫—É
        pass

    def infoExport(self):  # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç—Ä–µ–∫–æ–≤
        pass

    def about_programm(self):  # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
        pass

    # def add_to_playlist(self):
    #     pass

    def on_item_clicked(self, item):  # –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ player
        print(item.text())
        self.load_mp3(item.text())

    def on_slider_value_changed(self, value):  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ player-–∞
        self.player.setPosition(value)

    def update_label_value_slider(self):  # —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Ç—Ä–µ–∫–∞
        self.current_duration = self.player.duration() / 1000
        current_position = self.player.position() / 1000
        minutes_now = int(current_position // 60)
        seconds_now = int(current_position % 60)
        self.NowTime_label.setText(f'{minutes_now:02}:{seconds_now:02}')
        remain = self.current_duration - current_position
        minutes_remain = int(remain // 60)
        seconds_remain = int((remain % 60))
        self.RemainTime_label.setText(f'-{minutes_remain:02}:{seconds_remain:02}')

    def create_new_playlist(self):
        name, ok = QInputDialog.getText(None, 'Create New Playlist', 'Enter playlist name:')
        if ok and name:
            self.cur.execute('INSERT INTO playlist_s (name) VALUES (?)', (name,))
            self.con.commit()
            playlist_item = QTreeWidgetItem(self.tree, [name])
            playlist_item.setFlags(playlist_item.flags() | Qt.ItemIsEditable)
            self.tree.setCurrentItem(playlist_item)
        else:
            QMessageBox.warning(None, "Invalid Input", "Invalid playlist name.")

    def track_clicked(self, item, column):
        track_link = item.toolTip(column)
        print("Track Path:", track_link)

    def show_context_menu(position):  # –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –≤ –ø–ª–µ–π–ª–∏—Å—Ç
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        item = tree_widget.itemAt(position)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≥–ª–∞–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        if item and item.parent() is None:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            context_menu = QMenu(tree_widget)

            # –î–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–º –º–µ–Ω—é
            action1 = QAction("–î–µ–π—Å—Ç–≤–∏–µ 1", tree_widget)
            action2 = QAction("–î–µ–π—Å—Ç–≤–∏–µ 2", tree_widget)

            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
            context_menu.addAction(action1)
            context_menu.addAction(action2)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            context_menu.exec_(tree_widget.mapToGlobal(position))


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.excepthook = except_hook
    sys.exit(app.exec_())
